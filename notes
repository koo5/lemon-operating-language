templates
===

we can use decode_attributed like decode_attributed('{element xxx}abc'),
instead of the current way of chopping the template into pieces..

output has to be run thru a templating engine that replaces {%element%}
with current element 

get back to the templating branch but use a proper engine

function declarations and calls are missing.   it should allow
parameters inside the function signature like this: To decide what
number is the larger of (N - number) and (M - number):

https://wiki.python.org/moin/Templating






language
===
inspiration:

binops: find the best nodes to ops ratio for our purposes, implement them all

functions: depend on templates?
how many other features can be handled by function calls?

variables : 
---
theres some figuring out of static vs dynamic scope: http://en.wikipedia.org/wiki/Scope_(computer_science)
nodes that reference variables should probably use both names and object references to the declaring nodes
upon loading or entering, can optionally use reference by name, when refactoring, use object reference....

foreach loop

object types - shrug, just throw them there for now, dont think about a type system, they are crucial for:

boolean adjectives: http://www.ifwiki.org/index.php/Inform_7_for_Programmers/Part_1#Boolean_Adjectives

tables - alternative ast presentation fun starts here!

rules - or here..

or anywhere..


